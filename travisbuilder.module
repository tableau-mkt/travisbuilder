<?php
/**
 * @file travisbuilder.module
 * Trigger CI builds within Drupal.
 */

use Travis\Client;


/**
 * Implements hook_menu().
 */
function travisbuilder_menu() {
  $path = 'admin/config/system/travis-builder';
  $common = array(
    'access arguments' => array('administer site configuration'),
    'file' => 'travisbuilder.admin.inc',
  );

  $items[$path] = array(
    'title' => 'Travis Builder',
    'description' => 'Configure Travis settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('travisbuilder_settings_form'),
  ) + $common;
  $items[$path . '/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items[$path . '/history'] = array(
    'title' => 'History',
    'description' => t('Recent Travis builds.'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => array('travisbuilder_build_list_page'),
    'weight' => 10,
  ) + $common;

  return $items;
}


/**
 * Implements hook_admin_paths().
 */
function travisbuilder_admin_paths() {
  $paths = array(
    'admin/system/travis-builder' => TRUE,
  );
  return $paths;
}


/**
 * Mix param(s) and global settings.
 *
 * @return array
 */
function _travisbuilder_configs() {
  // @todo With multiple repos, will need update.
  $configs = array();
  $defaults = array(
    'repo' => '',
    'branch' => 'master',
    'access_token' => '',
    'schedule' => 10800,
  );
  foreach ($defaults as $key => $default) {
    $configs[$key] = variable_get('travisbuilder_' . $key, $default);
  }

  return $configs;
}


/**
 * Wrapper to return a Travis client.
 *
 * @param string $repository
 *   Name of repository.
 *
 * @return \Travis\Client|null
 *   If the module is successfully configured, a fully configured Elomentary
 *   client will be returned. Otherwise, NULL will be returned.
 */
function travisbuilder_repo_client($repository) {
  $repo_client = &drupal_static(__FUNCTION__, array());

  // Only instantiate a new client if one hasn't already been.
  if (!$repo_client && $repository) {
    // @todo With multiple repos, will need update.
    $configs = _travisbuilder_configs();
    $configs['repo'] = $repository;

    // Instantiate Travis client via library.
    try {
      $client = new Client();
    }
    catch (FieldException $e) {
      throw new DrupalException("Error using Travis client with message: " . $e->getMessage());
    }

    if ($client) {
      // @todo Authenticate.
      // https://github.com/l3l0/php-travis-client/issues/4

      // Allow other modules to alter the client before it is used / returned.
      drupal_alter('travisbuilder_client', $client);

      // Point to repo.
      $repo_client = $client->fetchRepository($configs['repo']);
    }
  }

  return $repo_client;
}


/**
 * Trigger a Travis build to occur on the globally configured repo.
 *
 * Resources:
 *   http://docs.travis-ci.com/api/#jobs
 *
 * @param string $repository
 *   Name of repository.
 */
function _travisbuilder_trigger_build($repository) {
  $configs = _travisbuilder_configs();
  $now = time();

  // Honor minimum lifetime.
  if (($now - variable_get('travisbuilder_last', 0)) > $configs['schedule']) {
    // Get the right build and trigger.
    $repo_client = travisbuilder_repo_client($repository);
    $builds = $repo_client->getBuilds()->findBy(array(
      'branch' => $configs['branch'],
    ));
    $result = $repo_client->restartBuild($builds[0]);

    // Log it and handle next time.
    variable_set('travisbuilder_last', $now);
    $build_url = format_string('https://travis-ci.org/!repo/builds/!id', array(
      '!repo' => $repository,
      '!id' => $build[0]->getId(),
    ));
    watchdog(
      'travisbuilder',
      t('Travis build triggered. Repository: !repo. Response: @result'),
      array('!repo' => $repository, '@result' => $result),
      WATCHDOG_NOTICE,
      $link = l('Visit Travis build #' . $builds[0]->getNumber(), $build_url);
    );

    return TRUE;
  }
  else {
    return FALSE;
  }
}
