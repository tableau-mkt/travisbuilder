<?php
/**
 * @file travisbuilder.module
 * Trigger CI builds within Drupal.
 */

use Travis\Client;

define('TRAVISBUILDER_API_FREE', 'https://api.travis-ci.org');
define('TRAVISBUILDER_API_PAID', 'https://api.travis-ci.com');

/**
 * Implements hook_menu().
 */
function travisbuilder_menu() {
  $path = 'admin/config/system/travis-builder';
  $common = array(
    'access arguments' => array('administer site configuration'),
    'file' => 'travisbuilder.admin.inc',
  );

  $items[$path] = array(
    'title' => 'Travis Builder',
    'description' => 'Configure Travis settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('travisbuilder_settings_form'),
  ) + $common;
  $items[$path . '/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items[$path . '/history'] = array(
    'title' => 'History',
    'description' => t('Recent Travis builds.'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => array('travisbuilder_build_list_page'),
    'weight' => 10,
  ) + $common;

  $items[$path . '/build'] = array(
    'title' => 'Trigger Build',
    'description' => t('Trigger a Travis build via a URL.'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => array('travisbuilder_build_trigger_page'),
    //'page arguments' => array(1),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}


/**
 * Implements hook_admin_paths().
 */
function travisbuilder_admin_paths() {
  $paths = array(
    'admin/system/travis-builder' => TRUE,
  );
  return $paths;
}


/**
 * Page callback to trigger a build manually.
 * @return [type] [description]
 */
function travisbuilder_build_trigger_page() {
  // @ todo Allow separate repos to trigger as ctools configs.
  $repository = check_plain(variable_get('travisbuilder_repo', ''));
  $result = _travisbuilder_trigger_build($repository);

  drupal_set_title(t('Trigger Build'));
  $output = t('<p>Most recent build re-start attempted.</p>');
  $output .= t('<p><strong>Repository:</strong> !repo</p>', array('!repo' => $repository));
  $output .= t('<p><strong>Branch:</strong> !branch</p>', array('!branch' => $result['branch']));
  $output .= t('<p><strong>Result:</strong> !result</p>', array('!result' => $result['status_message']));

  return $output;
}


/**
 * Mix param(s) and global settings.
 *
 * @return array
 */
function _travisbuilder_configs() {
  // @todo With multiple repos, will need update.
  $configs = array();
  $defaults = array(
    'private' => 0,
    'repo' => '',
    'branch' => 'master',
    'access_token' => '',
    'schedule' => 10800,
  );
  foreach ($defaults as $key => $default) {
    $configs[$key] = variable_get('travisbuilder_' . $key, $default);
  }

  return $configs;
}


/**
 * Wrapper to return a Travis client.
 *
 * @param string $repository
 *   Name of repository.
 *
 * @return \Travis\Client|null
 *   If the module is successfully configured, a fully configured Elomentary
 *   client will be returned. Otherwise, NULL will be returned.
 */
function travisbuilder_client($repository) {
  $client = &drupal_static(__FUNCTION__, array());

  // Only instantiate a new client if one hasn't already been.
  if (!$client && $repository) {
    // @todo With multiple repos, will need update.
    $configs = _travisbuilder_configs();
    $configs['repo'] = $repository;

    // Instantiate Travis client via library.
    try {
      $client = new Client();
    }
    catch (FieldException $e) {
      throw new DrupalException("Error using Travis client with message: " . $e->getMessage());
    }

    if ($client) {
      // Allow other modules to alter the client before it is used / returned.
      drupal_alter('travisbuilder_client', $client);
    }
  }

  return $client;
}


/**
 * Trigger a Travis build to occur on the globally configured repo.
 *
 * Resources:
 *   http://docs.travis-ci.com/api/#jobs
 *
 * @param string $repository
 *   Name of repository.
 *
 * @return boolean
 *   Result of build.
 */
function _travisbuilder_trigger_build($repository, $ignore_lifetime = FALSE, $branch = FALSE) {
  $configs = _travisbuilder_configs();
  $branch = $branch ?: $configs['branch'];
  $time_since_last = time() - variable_get('travisbuilder_last', 0);

//$configs['access_token'] = '555';

  // Honor minimum lifetime.
  if ($ignore_lifetime || ($time_since_last > $configs['schedule'])) {

    // Get the right build.
    $client = travisbuilder_client($repository);
    if ($configs['private']) {
      $client->setApiUrl(TRAVISBUILDER_API_PAID);
    }
    $repo_client = $client->fetchRepository($repository, $configs['access_token']);
    $builds = $repo_client->getBuilds()->findBy(array('branch' => $branch));
    $build = $builds->first();

    // Couldn't get the library to play nice with file_get_contents().
    // $result = $client->restartBuild($build, $configs['access_token']);
    $result = _travisbuilder_trigger_request($build->getId());
    $result['branch'] = $branch;

    // Log it and handle next time.
    variable_set('travisbuilder_last', time());
    $build_url = format_string('https://travis-ci.org/!repo/builds/!id', array(
      '!repo' => $repository,
      '!id' => $build->getId(),
    ));
    $message = 'Travis build triggered. Repository: !repo. Branch: @branch. Build ID: @build. Status: @status. Response code: @code. Message: @data';
    $vars = array(
      '!repo' => $repository,
      '@status' => $result['status_message'],
      '@branch' => $branch,
      '@build' => $build->getId(),
      '@code' => $result['code'],
      '@data' => $result['data'],
    );
    watchdog('travisbuilder', $message, $vars, WATCHDOG_NOTICE,
      $link = l('Visit Travis build #' . $build->getNumber(), $build_url)
    );

    return $result;
  }
  else {
    return FALSE;
  }
}


/**
 * Send the request to retrigger a build.
 *
 * @param  int $build_id
 *   Travis build id to act upon, for URL construction.
 * @param  string $token
 *   Travis user authorization token.
 * @return array
 *   Response items the calling function(s) might care about.
 */
function _travisbuilder_trigger_request($build_id) {
  $configs = _travisbuilder_configs();
  $api_url = ($configs['private']) ? TRAVISBUILDER_API_PAID : TRAVISBUILDER_API_FREE;
  $url = sprintf('%s/builds/%s/restart.json', $api_url, $build_id);

  $headers = array(
    'Authorization' => 'token ' . $configs['access_token'],
  );
  $response = drupal_http_request($url, array(
    'data' => '',
    'headers' => $headers,
    'timeout' => 5,
    'method' => 'POST',
  ));

  return array(
    'data' => $response->data,
    'status_message' => $response->status_message,
    'code' => $response->code,
  );
}
